// Color Sensor
#define s0 13      //Module pins wiring
#define s1 11
#define s2 7
#define s3 6
#define out 8

int data=0;        //This is where we're going to stock our values

// Ultrasonic Sensor
const int pingTrigPin = 12; //Trigger connected to PIN 12   
const int pingEchoPin = 10; //Echo connected yo PIN 10
  
const int LED = 2;
const int VIBR = 3;
int switch_pin = 4;
int buz=9; //Buzzer to PIN 9

// Photosensor
int sensorPin = 0; //define analog pin 2
int value = 0;

const int buttonPin = 5;     // the number of the pushbutton pin

// variables will change:
int buttonState = 0;

int numTones = 3;
int red_tone[] = {261, 277, 294};
int blue_tone[] = {194, 177, 161};
int green_tone[] = {261, 330, 440};

void setup() {   
  Serial.begin(9600);
  pinMode(LED, OUTPUT); // Declare the LED as an output
  pinMode(buz, OUTPUT); // Set buzzer - pin 9 as an output
  pinMode(VIBR, OUTPUT);
  pinMode(switch_pin, INPUT);
  pinMode(buttonPin, INPUT);

  pinMode(s0,OUTPUT);    //pin modes
  pinMode(s1,OUTPUT);
  pinMode(s2,OUTPUT);
  pinMode(s3,OUTPUT);
  pinMode(out,INPUT);
   
  digitalWrite(s0,HIGH); //Putting S0/S1 on HIGH/HIGH levels means the output frequency scalling is at 100% (recommended)
  digitalWrite(s1,HIGH); //LOW/LOW is off HIGH/LOW is 20% and LOW/HIGH is  2%
}   

void loop()   
{   
  // Ultrasonic Sensor Setup
  long duration, cm;   
  pinMode(pingTrigPin, OUTPUT);   
  digitalWrite(pingTrigPin, LOW);   // Make trigger off
  delayMicroseconds(2);   
  digitalWrite(pingTrigPin, HIGH);   
  delayMicroseconds(5);   
  digitalWrite(pingTrigPin, LOW);   
  pinMode(pingEchoPin, INPUT);   
  duration = pulseIn(pingEchoPin, HIGH);   
  cm = microsecondsToCentimeters(duration);   
  
  if(digitalRead(switch_pin) == HIGH){
    digitalWrite(VIBR, LOW);
    digitalWrite(LED, LOW);
    }

  if(digitalRead(switch_pin) == LOW){
    if(cm<=70 && cm>0)
    {
      int d= map(cm, 1, 100, 10, 1000);
      digitalWrite(LED, HIGH); // Turn the LED on
      
      digitalWrite(VIBR, HIGH);
      digitalWrite(buz, HIGH);
      delay(100);
      
      digitalWrite(LED, LOW);
      digitalWrite(VIBR, LOW);
      digitalWrite(buz, LOW);      
      delay(d);
    }   
    else {
      digitalWrite(LED, HIGH); // Turn the LED on
      digitalWrite(VIBR, LOW);
      digitalWrite(buz, LOW);
    }

    // Button For PhotoSensor                     
    buttonState = digitalRead(buttonPin);

  // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
    if (buttonState == HIGH) { //1 ..on
      value = analogRead(sensorPin); 
      Serial.println(value); // light intensity
                            // high values for bright environment
                           // low values for dark environment
  
      if(value<=800 && value>0){ // If there is a light in the room
        digitalWrite(VIBR, HIGH);
        delay(3000);
        digitalWrite(VIBR, LOW);
      }
      else{
        digitalWrite(buz, HIGH);
        delay(3000);
        digitalWrite(buz, LOW);
      }
    } else {
      // turn LED off:
      digitalWrite(VIBR, LOW);
      digitalWrite(buz, LOW);
    }

    // Color Sensor Setup
    digitalWrite(s2,LOW);        //S2/S3 levels define which set of photodiodes we are using LOW/LOW is for RED LOW/HIGH is for Blue and HIGH/HIGH is for green
    digitalWrite(s3,LOW);
    int red_data=pulseIn(out,LOW);                   //Executing GetData function to get the value
    int redColor = map(red_data, 7, 60, 255,0);
    Serial.println(redColor);
    Serial.println(red_data);
    
    digitalWrite(s2,LOW);
    digitalWrite(s3,HIGH);
    int blue_data=pulseIn(out,LOW);
    int blueColor = map(blue_data, 11, 43, 255,0);
    Serial.println(blueColor);
    Serial.println(blue_data);
  
    digitalWrite(s2,HIGH);
    digitalWrite(s3,HIGH);
    int green_data=pulseIn(out,LOW);
    int greenColor = map(green_data, 21, 62, 255,0);
    Serial.println(greenColor);
    Serial.println(green_data);

    delay(1000);
    if(redColor>blueColor && redColor>greenColor && redColor>220){
      for (int i = 0; i < numTones; i++)
      {
        tone(buz, red_tone[i]);
        delay(500);
      }
      noTone(buz);
      Serial.println("Red Detected");
    }
    else if(blueColor>redColor && blueColor>greenColor && blueColor>220){
      for (int i = 0; i < numTones; i++)
      {
        tone(buz, blue_tone[i]);
        delay(500);
      }
      noTone(buz);
      Serial.println("Blue Detected");
    }
    else if(greenColor>redColor && greenColor>blueColor && greenColor>220){
      for (int i = 0; i < numTones; i++)
      {
        tone(buz, green_tone[i]);
        delay(500);
      }
      noTone(buz);
      Serial.println("Green Detected");
    }
  }
  Serial.print("Distance: ");
  Serial.print(cm);
  Serial.println(" cm");
}
  
long microsecondsToCentimeters(long microseconds)   
{   
  return microseconds / 29 / 2;   
}